buildscript {
	ext {
		mainClassNameForDocker = 'com.jahnelgroup.AppKt'
	}
	repositories {
		mavenCentral()

		// gradle-docker
		maven {
			url "https://plugins.gradle.org/m2/"
		}

		mavenLocal()
		
		// gradle-docker-compose-plugin
		jcenter()
	}
	dependencies {
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1")
		classpath("com.avast.gradle:gradle-docker-compose-plugin:0.9.3")
		classpath("mysql:mysql-connector-java:8.0.15")
	}
}

plugins {
	id "org.flywaydb.flyway" version "5.2.4"
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.2.71'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.2.71'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'docker-compose'

group = 'com.jahnelgroup'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	mavenLocal()
}

// spring-boot-devtools
// https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	// Web and Thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	compile "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1"

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config'
	implementation 'org.springframework:spring-context-support'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.springframework.security:spring-security-data' // SecurityEvaluationContextExtension

	// Database (h2 is in testing section)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	compile "org.flywaydb:flyway-core:5.2.4"

	// Production Support
	//	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Development Support
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Kotlin
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.jetbrains.kotlin:kotlin-reflect"

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompile "com.h2database:h2:1.4.199"

	// Other 3rd Party Libs
	implementation "org.passay:passay:1.5.0" // password validation and generation
}

// Kotlin
// =========================
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

// Flyway
// =========================
flyway {
	configFiles = ['flyway/local.conf', 'flyway/credentials/local.pass']
}

// Test
// =========================
test {
	systemProperty 'spring.profiles.active', 'test'
}

// AWS
// =========================

bootJar {
	archiveName = 'app.jar'
	from('ebextensions') {
		into '.ebextensions'
	}
}

// Docker
// =========================
// unpacking spring fat jar is faster in a docker container
task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}

docker {
	name "${project.group}/${bootJar.baseName}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency", 'MAIN_CLASS': mainClassNameForDocker])
}
// automatically run a build before containerizing the app
docker.dependsOn build

dockerCompose {
	full {
		useComposeFiles = ['docker-compose.yml', 'docker-compose.full.yml']
	}
	deps {
		useComposeFiles = ['docker-compose.yml']
	}
}
// automatically build the app's docker container before running compose with the app included
fullComposeUp.dependsOn  { tasks.dockerTag }
